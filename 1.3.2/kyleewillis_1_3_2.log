# IPython log file

import matplotib.pyplot as plt
import matplotlib.pyplot as plt
a = randn(10000)
plt.hit(a)
plt.hist(a)
#[Out]# (array([    4.,    95.,   443.,  1484.,  2636.,  2852.,  1705.,   628.,
#[Out]#          139.,    14.]), array([-3.82818726, -3.08137114, -2.33455501, -1.58773888, -0.84092275,
#[Out]#        -0.09410663,  0.6527095 ,  1.39952563,  2.14634176,  2.89315788,
#[Out]#         3.63997401]), <a list of 10 Patch objects>)
plt.show()
plt.show()
plt.show(a)
%cd "C:\Users\k.willis\Documents\Python"
# Thu, 20 Oct 2016 09:45:48
# Kylee Willis 10/20/16 1.3.2

# Thu, 20 Oct 2016 09:48:34
22 + 20
#[Out]# 42
# Thu, 20 Oct 2016 09:50:31
5 + 37. #float
#[Out]# 42.0
# Thu, 20 Oct 2016 09:52:17
7*2
#[Out]# 14
# Thu, 20 Oct 2016 09:52:20
7*2.
#[Out]# 14.0
# Thu, 20 Oct 2016 09:53:39
7/2
#[Out]# 3
# Thu, 20 Oct 2016 09:53:46
7/2.
#[Out]# 3.5
# Thu, 20 Oct 2016 09:55:31
# 7b: int/int returns closest whole number (leaves remainder) but int/float returns decimal

# Thu, 20 Oct 2016 09:56:14
a=42
# Thu, 20 Oct 2016 09:57:28
3*2 #pizza
#[Out]# 6
# Thu, 20 Oct 2016 09:58:10
student_age = 16
# Thu, 20 Oct 2016 09:59:39
# 8. #AssignmentForTheWin^^

# Thu, 20 Oct 2016 10:00:24
23**43 #I hate exponents
#[Out]# 35834136918934220777541995677272642015423987712183913488967L
# Thu, 20 Oct 2016 10:01:01
# That was 9.

# Thu, 20 Oct 2016 10:01:37
%logstop
%cd "C:\Users\k.willis\Documents\Python"
# Fri, 21 Oct 2016 09:25:37
# Kylee Willis 10/21/2016 1.3.2

# Fri, 21 Oct 2016 09:29:48
abs(-42)
#[Out]# 42
# Fri, 21 Oct 2016 09:37:24
# 11: An advantage you get from typing code in IPython would be the immediate running of the code. The code editor exists to create code that you don't need to have run straight away or has multiple lines.

# Fri, 21 Oct 2016 09:40:20
# 13: You'd want to use a docstring to help people figure out what your code does.

# Fri, 21 Oct 2016 09:43:43
# 14: You can reuse the variables for a different task once they're deleted.

# Fri, 21 Oct 2016 09:46:04
%run "c:\users\k4410~1.wil\appdata\local\temp\tmp10_313.py"# Fri, 21 Oct 2016 09:46:10
%run "c:\users\k4410~1.wil\appdata\local\temp\tmpnipomt.py"# Fri, 21 Oct 2016 09:48:55
a = add_tip(20, 0.15)
# Fri, 21 Oct 2016 09:48:56
a
#[Out]# 23.0
# Fri, 21 Oct 2016 09:49:16
add_tip(30, 0.15)
#[Out]# 34.5
# Fri, 21 Oct 2016 09:49:35
add_tip(30)
# Fri, 21 Oct 2016 09:51:42
add_tip(42, 42, 42)
# Fri, 21 Oct 2016 09:53:02
# 17: We didn't give it enough numbers (arguments) to actually run the program.

# Fri, 21 Oct 2016 10:02:35
#17a. Hypotenuse

# Fri, 21 Oct 2016 10:02:47
hyp(3,4)
# Fri, 21 Oct 2016 10:03:09
hyp(3,4)
# Fri, 21 Oct 2016 10:04:12
hyp(3, 4)
# Fri, 21 Oct 2016 10:04:41
% logstop
%cd "C:\Users\k.willis\Documents\Python"
%cd "C:\Users\k.willis\Documents\Python"
# Mon, 24 Oct 2016 09:21:35
# Kylee Willis 10/24/2016 1.3.2

# Mon, 24 Oct 2016 09:24:45
hyp(3,4)
# Mon, 24 Oct 2016 09:25:59
#17a. I'll probably go back to that if there's time at the end.

# Mon, 24 Oct 2016 09:29:17
#17b. Mean test

# Mon, 24 Oct 2016 09:29:35
mean(3,4,7)
# Mon, 24 Oct 2016 09:33:43
mean(3,4,7)
# Mon, 24 Oct 2016 09:38:45
%run C:/Users/k.willis/Documents/Python/KWillisFrason_1_3_2.py# Mon, 24 Oct 2016 09:39:07
#17a: I think I got it
hyp(3,4_
# Mon, 24 Oct 2016 09:39:12
hyp(3,4)
#[Out]# 5.0
# Mon, 24 Oct 2016 09:40:09
%run C:/Users/k.willis/Documents/Python/KWillisFrason_1_3_2.py# Mon, 24 Oct 2016 09:40:27
#17b: Idk
mean(3,4,7)
#[Out]# 4
# Mon, 24 Oct 2016 09:40:59
mean(3,4,7)
#[Out]# 4
# Mon, 24 Oct 2016 09:41:13
%run C:/Users/k.willis/Documents/Python/KWillisFrason_1_3_2.py# Mon, 24 Oct 2016 09:41:18
mean(3,4,7)
#[Out]# 4.666666666666667
# Mon, 24 Oct 2016 09:44:44
%run C:/Users/k.willis/Documents/Python/KWillisFrason_1_3_2.py# Mon, 24 Oct 2016 09:44:53
perimeter(3,4)
#[Out]# 14
# Mon, 24 Oct 2016 09:45:19
#That was 17c. Sorry.

# Mon, 24 Oct 2016 09:49:27
#Conclusion Question 2: We learned about ints, which are integers; floats, which are decimals (real numbers); booleans, which are true/false values; and strings, which are characters.

# Mon, 24 Oct 2016 09:56:23
#Conclusion Question 3: IPython immediately gets results, but you can't type multiple lines of code in it. You can type multiple lines of code in the code editor, but you don't get immediate results. You have to test it in the IPython section.

# Mon, 24 Oct 2016 09:59:45
#Conclusion Question 4: You don't have to type out the code every time you want to use it, you already have it kinda shorthand. Another advantage would be being able to use different numbers for your variables, which probably wouldn't happen in the IPython section (if it worked like that).

# Mon, 24 Oct 2016 10:01:38
% logstop
